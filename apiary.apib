FORMAT: 1A
HOST: http://rtp.persoo.cz


# Persoo RTP API
Persoo has two APIs - one for [administration](http://docs.persoo.apiary.io/) and another for reporting web visitors behavior and querying for the recommended web personalizations. Here we describe the second one.

Real-time processing unit (RTP) is the worker of the Persoo cloud that processes requests reported from browsers or web servers and provides data for personalizations in response.

### Terminology

* **Visitor** - real website visitor. He uses several browsers or devices identified by VID (Visitor ID, i.e. cookie), has email address, user ID, etc.
* **Client** - owner of the website.
* **User** - someone configuring Persoo for a client.

## How Persoo works
Create your account in Persoo, provide products and categories exports (e.g., by a XML feed), add the Persoo JavaScript loader to your webpages, and configure the rest in the Persoo administration.

### Ways of integration

There are two ways to integrate Persoo in your web:
* **JavaScript** - your web server need not know about Persoo. Everything is realized through [JavaScript client](https://confluence.persoo.cz/display/DOC/Javascript+Data+Collection) which reports data, receives personalizations as HTML fragments and displays them in the appropriate locations. Personalizations are added to a page as dynamic HTML fragments (similarly to AJAX, but it works also cross domain).

* **Web server** - your web server is responsible for tracking the visitor/browser identification. It reports visitors behavior and receives personalizations in the JSON format. It is its responsibility to render the received data to HTML or even to decide how to use them.

You can combine both ways - your web server renders the personalizations by itself to have the web pages loaded faster in browsers; but the data about offer impressions, clicks, and dynamic AJAX events are reported through the JavaScript client.

### Report data and query for personalizations

In Persoo, both is processed in real time in one request:

1. **Report data** --- webserver or javascript in browser reports data about visitor interactions.
   I.e., visitor with cookie "ABC" did event "pageview", because he viewed "detail" 
   page of product "prod123" from category "catXYZ". Server process reported data in real time before sending response.
2. **Query for personalizations/recommendations** --- as a response, RTP returns personalizactionns
   related to product "detail" page, i.e. recommendation, personalized banners,...

In website personalizations, we typically want to report visitor interactions
(i.e. pageview, add to cart, click button) and react immediatelly (display/update
a recommendation, offer, banner,...). Persoo is designed not to require too many queries,
because work with many http requests makes it slowlyer. You can **report all data at once in one query** and even get what you need. In case you need to report data only, Persoo returns
almost empty response, just as a confirmation.

### Workflows for request processing

RTP requests are processed by **workflows**. Main workflow is designed to processed **events**
from a website, i.e. "pageview", "addToCart", "statistics" events. Workflows can call other
workflows as sub-workflows, or even use conditions or change arguments for workflow calls.

In RTP request, you can specify a workflow to be called, i.e. when you need to get recommendations
from a particular recommendation scenario.

TODO predefined workflows, events, parameters they need (dataLayers specification).

* `main({event:<string>, params...})`
 * event `pageview({pageType: <string>, itemID: <string>, categoryID: <string>, hierarchy: <string>, transaction: <JSON>, basketTotal: <number>, basketItems: <JSON>})`
   `rawData: <boolean>` (optional) return raw data as list of recommended products, too.
   `idsOnly: <boolean>` (optional) return only product ids, not product items (metadata).
 * event `addToBasket({itemID: <string>})`
 * event `removeItem({itemID: <string>})` ... remove item form viewed and thus preferred items.
 
* event `getScenario({scenarioID: <string>})` with optional arguments:
 * `itemID: <string>` (optional) item for item based recommendations (currently viewed item)
 * `categoryID: <string>` (optional) category for category based recommendations (currently viewed category)
 * `count: <integer>` (optional) maximum number of items to return
 * `idsOnly: <boolean>` (optional) return only product ids, not product items (metadata).
 
* event `getAlgorithm({algorithmID: <string>})` with optional arguments:
 * `itemID: <string>` (optional) item for item based recommendations (currently viewed item)
 * `categoryID: <string>` (optional) category for category based recommendations (currently viewed category)
 * `count: <integer>` (optional) maximum number of items to return (Note: some algorithms temporarily returns 30 items)

### Visitor identifications

Visitor in Persoo corresponds to a real person. Visitor may use several **browsers or devices.** 
In Persoo, we denote them by **VID** (VisitorID). Typically they correspond to a cookie.

Visitor also have **named identifications** like email, phone number, user ID, etc. These identification
are in Persoo represented by pairs **[idType, idValue]**, i.e. [email, hello@persoo.cz], 
[phone, "+420608179251"], [userId, 12345].

You only need to report identification to Persoo and it does the rest for you -- calculate equivalence
classes with certain probability, merging visitor profiles, or even spliting visitor profiles when
it is necessary to correct an equivalence class.

## Technical

### Allowed HTTPs requests

- `GET` - Retrieves a resource or list of resources

### Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 or 204 instead).
- 204 `No content` - The request was successful, but returns no content.
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication token is invalid or expired (try login again)
- 403 `Forbidden` - Access denied. 
- 404 `Not Found` - Resource was not found.

### JSON/JSONP
All methods supports JSON and JSONP. Format is selected by suffix (file type)
in request's pathname:
* **.js** for JSONP (response is javascript)
* **.json** for JSON

Javascript in JSONP response calls the `function persoo.response.push()` with the JSON response as the argument. 
The caller is responsible for implementing this function.

When working in javascript, use [javascript client](https://confluence.persoo.cz/display/DOC/Javascript+Data+Collection) for sending and receiving request instead of raw API.

Why we support JSONP? It's necessary for javascript client in web browsers,
which follow CORS restrictions (disallow cross domain requests).


# Group Report & Query
Reporting visitor interactions or querying for personalizations.

HTTP Header params:
* `referer` (required) ... URL of the web page, which requested personalizations
* `cookie` (optional) ... used only if third-party cookies are ON.

**Session / non-session modes.** Visitors visits websites in sessions. They typically do a stream of events, ie. view several pages or purchase a product. 
In session mode, Persoo keeps profile and related data in cache for higher efficiency. Moreover there are other workflows related to a session - call 
custom workflow on session expiration, calculate data only for current session, etc.

NOTE: at the moment, requests with identification  "_vid=<visitorID>" uses session mode, 
other requests with identification "_idType=<idType>&_idValue=<ID>" uses non-session mode.

**Custom parameters.** You can provide arbitrary parameters/fields, but predefined workflows can work only with some of them.
Each parameter value is JSON. Moreover you can remove the string quotes 
if the value is not a reserved word (null, true, false) and if it does not start with a digit, '+', '-', '{' or '['.
Example: `prop1=abc&prop2="xyz"&prop3=123&prop4=1.0&prop5=true` is correct, but following must use quotes, otherwise not interpreted as string
`prop1="12abc"&prop2="123"&prop3="true"&prop4="null"`.

TODO differences when third-party cookies are on

## Call workflow for current visitor [/{account_id}/{environment_id}/workflow.json?_vid={visitor_id}&_a={agent}&_e={event}&_w={workflow}&_queryOnly={queryOnly}&_debug={debug}&rawData={raw_data}&idsOnly={ids_only}&pageType={page_type}&itemID={item_id}&categoryID={category_id}&hiearchy={hierarchy}&{customfields}]
Usually, javascript client keeps visitor identification in a cookie and uses JSONP version
to report visitor interactions and to receive personalizations as HTML fragments.

+ Parameters
    + account_id (required, string, `h1kivl4j11e9li9ev8t14e1r`) ... ID of an account.
    + environment_id (required, string, `p`) ... ID of an environment. 
          Production has always ID 'p'. Typically there is also 'test'. 
          Other IDs may be added during configuration.
    + visitor_id (required, string, `AAABQAg1a7sMJnpF6WlwIFuC`) ... Visitor ID, 
          which identifies browser or device.
    + agent (required, string, `my-server-3`) ... ID of webserver, who calls this API.
    
    + workflow (optional, string, `pageview`) ... Workflow ID. Workflow to process the request.
    + queryOnly (optional, boolean, `false`) ... Whether the request is meant to update the corresponding visitor profile.
        or only queries on the profile. Value 'true' doesn't quarantee all workflows become read-only - it's the client's 
        responsibility to use 'true' only with truly read-only workflows. 
        NOTE: currently, it must be false in the session mode and true in the non-session mode.
    + debug (optional, boolean, `false`) ... Whether to include debug information in the response.    
    + event (optional, string, `pageview`) ... Event name/ID. Typical request to RTP corresponds to visitor event/interaction and carries data about the event.
    

    + raw_data (optional, boolean, `true`) ... Whether to return also raw recommendation data as list of recommended products with its metadata. Not only HTML fragmetns.
    + ids_only (optional, boolean, `true`) ... Extends "rawData" atribute: Whether itemIDs only or all product metadata. Default is false.
    
    + page_type (required, string, `homepage`) ... pageTypes (as you have in dataLayer and also defined in settings in Persoo administration).
    + item_id (optional, string, `PROD001`) ... Context: event is related to product with given itemID.
    + category_id (optional, string, `Smart phones`) ... Context: event is related to category with given categoryID.
    + hierarchy (optional, string, `Electonics:Phones:Smart phones`) ... Context: category hierarchy as given in page breadcrumb.
    + customfields (optional, string, `customField=customValue`) ... Your custom fields. See [other fields](#workflow_fields)
    


### workflow.json [GET]

+ Request

    + Headers

            Cookie: persooVID={visitor_id};
            Referer: http://my.website.com

+ Response 200 (application/json)
    + Body
    
            {
                data: {
                    "scenarios": {
                        "hpRecommend": {
                            "ids": [
                                "11564",
                                "12151",
                                "11570",
                                "12198",
                                "12854"                    
                            ]
                        },
                        "lastViewed": {
                            "ids": [
                                "11582",
                                "11569"
                            ]
                        }
                    },
                    "preferredSection": "phones"
                    "recommendedProductsHP": ["DF523", "AC235", "BZ628"]
                    "exported": "variables",
                    "key": "value",
                    "key2": [1,2,3]
                },
                functionCalls: [
                    {
                        "function": "myCustomFunction",
                        "args": ["arg1", "arg2", "arg3"]
                    }
                ],
                exceptions: [
                   {
                      "class": "cz.persoo.exception.PersooRuntimeException",
                      "message": "org.mozilla.javascript.EcmaError: TypeError: Cannot set property \"null\" of null to \"null\" (<init>#1)",
                      "stackTrace": [
                        {
                          "ref": "main",
                          "step": 0
                        },
                        {
                          "ref": "checkboxes"
                        }
                      ]
                    }
                ],
                "setVisitorID": "XADWW4D156SWW3264646SSSDF"
            }

## Call workflow for visitor by ID [/{account_id}/{environment_id}/workflow.json?_idType={identification_type}&_idValue={identification_value}&_a={agent}&_authKey={auth_key}&_e={event}&_w={workflow}&_queryOnly={queryOnly}&_debug={debug}&rawData={raw_data}&idsOnly={ids_only}&pageType={page_type}&itemID={item_id}&categoryID={category_id}&hiearchy={hierarchy}&{customfields}]
You can specify visitor by some of his IDs and run a workflow for this visitor.

+ Parameters
    + account_id (required, string, `h1kivl4j11e9li9ev8t14e1r`) ... ID of an account.
    + environment_id (required, string, `p`) ... ID of an environment. 
      Production has always ID 'p'. Typically there is also 'test'. 
      Other IDs may be added during configuration.
    + identification_type (required, string, `email`) ... Identification type, i.e. "browserID", "email", "userId",...
    + identification_value (required, string, `my@email.com`) ... Identification value for given type, i.e. email address, userId,...
    + agent (required, string, `my-server-3`) ... ID of webserver, who calls this API.
    + auth_key (required, string, `63229b614f8c32afc5e2043d87f9d3c7`) ... Authentization key, which is set in Persoo Administration.
    
    
    + workflow (optional, string, `pageview`) ... Workflow ID. Workflow to process the request.
    + queryOnly (optional, boolean, `false`) ... Whether the request is meant to update the corresponding visitor profile.
        or only queries on the profile. Value 'true' doesn't quarantee all workflows become read-only - it's the client's 
        responsibility to use 'true' only with truly read-only workflows. 
        NOTE: currently, it must be false in the session mode and true in the non-session mode.
    + debug (optional, boolean, `false`) ... Whether to include debug information in the response.
    + event (optional, string, `pageview`) ... Event name/ID. Typical request to RTP corresponds to visitor event/interaction and carries data about the event.

    + raw_data (optional, boolean, `true`) ... Whether to return also raw recommendation data as list of recommended products with its metadata. Not only HTML fragmetns.
    + ids_only (optional, boolean, `true`) ... Extends "rawData" atribute: Whether itemIDs only or all product metadata. Default is false.
    
    + page_type (required, string, `homepage`) ... pageTypes (as you have in dataLayer and also defined in settings in Persoo administration).
    + item_id (optional, string, `PROD001`) ... Context: event is related to product with given itemID.
    + category_id (optional, string, `Smart phones`) ... Context: event is related to category with given categoryID.
    + hierarchy (optional, string, `Electonics:Phones:Smart phones`) ... Context: category hierarchy as given in page breadcrumb.
    + customfields (optional, string, `customField=customValue`) ... Your custom fields. See [other fields](#workflow_fields)
    

### workflow.json [GET]

+ Request

    + Headers
        
            Referer: <http://mywebsite.com>

+ Response 200 (application/json)
    + Body
    
            {
                data: {
                    Arrind "scenarios": {
                        "hpRecommend": {
                            "ids": [
                                "11564",
                                "12151",
                                "11570",
                                "12198",
                                "12854"                    
                            ]
                        },
                        "lastViewed": {
                            "ids": [
                                "11582",
                                "11569"
                            ]
                        }
                    },
                    "preferredSection": "phones"
                    "recommendedProductsHP": ["DF523", "AC235", "BZ628"]
                    "exported": "variables",
                    "key": "value",
                    "key2": [1,2,3]
                },
                functionCalls: [
                    {
                        "function": "myCustomFunction",
                        "args": ["arg1", "arg2", "arg3"]
                    }
                ],
                exceptions: [
                   {
                      "class": "cz.persoo.exception.PersooRuntimeException",
                      "message": "org.mozilla.javascript.EcmaError: TypeError: Cannot set property \"null\" of null to \"null\" (<init>#1)",
                      "stackTrace": [
                        {
                          "ref": "main",
                          "step": 0
                        },
                        {
                          "ref": "checkboxes"
                        }
                      ]
                    }
                ],
                "setVisitorID": "XADWW4D156SWW3264646SSSDF"
            }

## Alias identification [/{account_id}/{environment_id}/alias.json?idType={id_type}&idValue={id_value}&aliases={aliases}&_a={agent}]
Add aliases to an identification. For example if you have login and email, or email and subscriberId, 
you can report the aliases for which **you must be 100% sure they correspond to the same person.**

Persoo will merge corresponding visitor profiles (if they already exists) and later on, 
new anonymous browsers can be identified by any of these identifications.

+ Parameters
    + account_id (required, string, `h1kivl4j11e9li9ev8t14e1r`) ... ID of an account.
    + environment_id (required, string, `p`) ... `id` of an environment. Production has always ID 'p'. Typically there is also 'test'. Other IDs may be added in configuration.
    + id_type (required, string, `email`) ... main identification type. 
    + id_value (required, string, `my@email.com`) ... main identification value.
    + aliases (required, string, `userID:123,phone:777777777`) ... comma separated identification pairs, each pair has format <idType>:<idValue>. 
    + agent (required, string, `my-server-3`) ... ID of webserver, who calls this API.


### alias.json [GET]
+ Response 200 (application/json)

    + Body

            { "status": "OK" }

# Group For debugging
To be able to debug or test workflows, there a few helper functions.

## Get visitor profile for current visitor [/{account_id}/{environment_id}/getVisitorSpace.json?_vid={visitor_id}&_a={agent}]
Returns visitor profile as JSON.

+ Parameters
    + account_id (required, string, `h1kivl4j11e9li9ev8t14e1r`) ... ID of an account.
    + environment_id (required, string, `p`) ... `id` of an environment. Production has always ID 'p'. Typically there is also 'test'. Other IDs may be added in configuration.
    + visitor_id (required, string, `AAABQAg1a7sMJnpF6WlwIFuC`) ... Visitor ID, 
          which identifies browser or device.
    + agent (required, string, `my-server-3`) ... ID of webserver, who calls this API.


### getVisitorSpace.json [GET]
+ Response 200 (application/json)

    + Body

            { "id": 2, "data": "about visitor" }
            
## Get visitor profile for visitor by ID [/{account_id}/{environment_id}/getVisitorSpace.json?_idType={identification_type}&_idValue={identification_value}&_a={agent}&_authKey={auth_key}]
Returns visitor profile as JSON.

+ Parameters
    + account_id (required, string, `h1kivl4j11e9li9ev8t14e1r`) ... ID of an account.
    + environment_id (required, string, `p`) ... `id` of an environment. Production has always ID 'p'. Typically there is also 'test'. Other IDs may be added in configuration.
    + identification_type (required, string, `email`) ... Identification type, i.e. "BrowserID", "email", "userId",...
    + identification_value (required, string, `my@email.com`) ... Identification value for given type, i.e. email address, userId,...
    + agent (required, string, `my-server-3`) ... ID of webserver, who calls this API.
    + auth_key (required, string, `63229b614f8c32afc5e2043d87f9d3c7`) ... Authentization key, which is set in Persoo Administration.



### getVisitorSpace.json [GET]
+ Response 200 (application/json)

    + Body

            { "id": 2, "data": "about visitor" }
            
## End session for current visitor [/{account_id}/{environment_id}/endSession?_vid={visitor_id}&_a={agent}]
Returns visitor profile as JSON.

+ Parameters
    + account_id (required, string, `h1kivl4j11e9li9ev8t14e1r`) ... ID of an account.
    + environment_id (required, string, `p`) ... `id` of an environment. Production has always ID 'p'. Typically there is also 'test'. Other IDs may be added in configuration.
    + visitor_id (required, string, `AAABQAg1a7sMJnpF6WlwIFuC`) ... Visitor ID, 
          which identifies browser or device.
    + agent (required, string, `my-server-3`) ... ID of webserver, who calls this API.


### endSession.json [GET]
+ Response 200 (application/json)

    + Body

            { "status": "OK" }            

## Clear third party cookies for current visitor [/clearBrowserID.json]
Reset third party cookies, that were used as browser identification. Do nothing if third party cookies are switched off for the account.

### clearBrowserID.json [GET]
+ Response 200 (application/json)

    + Body

            { "status": "OK" }
            
## Health Check [/healthCheck.json]
Health check.

### healthCheck.json [GET]
+ Response 200 (application/json)

    + Body

            { "healthCheck": "OK" }
            
# Group Examples
Here we show a few examples, which might be useful at your web server.
* `getScenario(scenarioID)` - to get recommendations from given scenario
* `reportDataAndGetScenariosByPageType(pageType, itemID, categoryID)` - to report pageview and retrieve all recommendations related to the pageType

## getScenario [/{account_id_1}/{environment_id}/workflow.json?_vid={visitor_id}&_a=my-server-agent&_e=getScenario&_queryOnly=false&_debug=false&scenarioID={scenario_id}&idsOnly={ids_only}&count={count}&itemID={item_id}&categoryID={category_id}]
Return itemIDs for given scenarioID. You can find available scenarioIDs for you account in persoo administration (scenarioID are in URL) or you can create new one.

Scenario might need a context to provide recommendations related to an itemID/categoryID/hierarchy. 
For example at homepage, you do not need context, at product detail you should provide itemID of viewed product, its categoryID and its hierarchy.

+ Parameters
    + account_id_1 (required, string, `93a9ilfo7s9bql8lppqvjqbr`) ... ID of an account.
    + environment_id (required, string, `p`) ... ID of an environment. 
          Production has always ID 'p'. Typically there is also 'test'. 
          Other IDs may be added during configuration.
    + visitor_id (required, string, `AAABUmjR66CeniESIlafWzb3`) ... Visitor ID, 
          which identifies browser or device.

    + scenario_id (required, string, `hpRecommend`) ... Scenario ID (as you find in url in Persoo administration).
    + ids_only (optional, boolean, `true`) ... return only list of IDs or return also all product metadata. Default is false.
    + count (optional, number, `5`) ... number of recommended products in response.
    + item_id (optional, string, `MYITEMID`) ... itemID if scenarion context requires it
    + category_id (optional, string, `MYCATEGORYID`) ... cagoryID if scenarion context requires it

### getScenario [GET]

+ Request

    + Headers

            Cookie: persooVID={visitor_id};
            Referer: http://my.website.com

+ Response 200 (application/json)
    + Body
    
            {
              "data": {
                "ids": [
                  "11564",
                  "12151",
                  "11570",
                  "12198",
                  "12854"
                ]
              },
              "exceptions": [],
              "functionCalls": []
            }

## getScenariosByPageType [/{account_id2}/{environment_id}/workflow.json?_vid={visitor_id}&_a=my-server-agent&_e=pageview&_queryOnly=false&_debug=false&rawData={raw_data}&idsOnly={ids_only}&pageType={page_type}&itemID={item_id}&categoryID={category_id}&hiearchy={hierarchy}]
Report data about pageview and get all scenarios for the page in one request.

Return itemIDs for given scenarioID. You can find available scenarioIDs for you account in persoo administration (scenarioID are in URL) or you can create new one.

Scenario might need a context to provide recommendations related to an itemID/categoryID/hierarchy. 
For example at homepage, you do not need context, at product detail you should provide itemID of viewed product, its categoryID and its hierarchy.

+ Parameters
    + account_id2 (required, string, `93a9ilfo7s9bql8lppqvjqbr`) ... ID of an account.
    + environment_id (required, string, `p`) ... ID of an environment. 
          Production has always ID 'p'. Typically there is also 'test'. 
          Other IDs may be added during configuration.
    + visitor_id (required, string, `AAABUmjR66CeniESIlafWzb3`) ... Visitor ID, 
          which identifies browser or device.

    + page_type (required, string, `homepage`) ... pageTypes (as you have in dataLayer and also defined in settings in Persoo administration).
    + item_id (optional, string, `PROD001`) ... Context: event is related to product with given itemID.
    + category_id (optional, string, `Smart phones`) ... Context: event is related to category with given categoryID.
    + hierarchy (optional, string, `Electonics:Phones:Smart phones`) ... Context: category hierarchy as given in page breadcrumb.
    
    + raw_data (optional, boolean, `true`) ... Whether to return also raw recommendation data as list of recommended products with its metadata. Not only HTML fragmetns.
    + ids_only (optional, boolean, `true`) ... Extends "rawData" atribute: Whether itemIDs only or all product metadata. Default is false.

### getScenariosByPageType [GET]

+ Request

    + Headers

            Cookie: persooVID={visitor_id};
            Referer: http://my.website.com

+ Response 200 (application/json)
    + Body
    
            {
              "data": {
                "scenarios": {
                  "hpRecommend": {
                    "ids": [
                      "11564",
                      "12151",
                      "11570",
                      "12198",
                      "12854"                    
                    ]
                  },
                  "lastViewed": {
                    "ids": [
                      "11582",
                      "11569"
                    ]
                  }
                }
              },
              "exceptions": [],
              "functionCalls": []
            }

## getVisitorProfile [/{account_id_1}/{environment_id}/getVisitorSpace.json?_vid={visitor_id}&_a=my-server-3]
Returns visitor profile as JSON. 
Visitor profile contains
* db part - data about use stored in DB
* tmp part - data computed from db part, session statistics and session related data (i.e. landing page, campaign), fetched products, categories data, scenarios,...
See [what data can I find in visitor profile](https://confluence.persoo.cz/pages/viewpage.action?pageId=42270728) (in czech)

+ Parameters
    + account_id_1 (required, string, `93a9ilfo7s9bql8lppqvjqbr`) ... ID of an account.
    + environment_id (required, string, `p`) ... `id` of an environment. Production has always ID 'p'. Typically there is also 'test'. Other IDs may be added in configuration.
    + visitor_id (required, string, `AAABUmjR66CeniESIlafWzb3`) ... Visitor ID, 
          which identifies browser or device.


### getVisitorSpace.json [GET]
+ Response 200 (application/json)

    + Body

            { "id": 2, "data": "about visitor" }